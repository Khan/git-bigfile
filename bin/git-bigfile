#!/usr/bin/env python
"""git-bigfile

Usage: git-bigfile [-h|-v] (add <filename>|clear|config [--global]|
                            filter-clean|filter-smudge|
                            pull [filename ...]|push|status)
"""

import os
import re
import subprocess
import sys
import time
sys.path.append(os.path.dirname(os.path.dirname(__file__)))

from gitbigfile import command, __version__


def _sync_git_bigfile(git_bigfile_root):
    """Make sure we're using the most up-to-date version of git_bigfile.

    Updates git_bigfile repositories.  Since this takes a few seconds,
    we only do it once a day.

    Arguments:
      git_bigfile_root: the root of the git_bigfile repository.

    Returns:
      True if we did the pull, false else.
    """
    try:
        # TODO(csilvers): use ~/.git-bigfile.pull or /tmp/git-bigfile.pull.<uid>
        last_pull_time = os.stat('/tmp/git-bigfile.pull').st_mtime
    except (IOError, OSError):
        last_pull_time = 0
    if last_pull_time + 24 * 60 * 60 >= time.time():
        return False

    git_bigfile_git = os.path.join(git_bigfile_root, ".git")

    try:
        # We need to set git-dir and work-tree otherwise it grabs the git dir
        # from the env which might already be set to a different repo.
        subprocess.check_call(['git', "--git-dir", git_bigfile_git, 
                               "--work-tree", git_bigfile_root, 'pull'])
    except subprocess.CalledProcessError, why:
        sys.exit('While updating the git-bigfiles binary, "git pull" failed '
                 'in %s: %s. '
                 'Make sure the repo is clean.' % (git_bigfile_root, str(why)))

    open('/tmp/git-bigfile.pull', 'w').close()    # update the last-pull time.
    return True


def main():
    """entry point"""
    import argparse

    usage = re.findall(r'Usage: (.*)', __doc__, re.DOTALL)[0].strip()

    parser = argparse.ArgumentParser(usage=usage, version=__version__)
    subparsers = parser.add_subparsers(dest='cmd')
    parser_add = subparsers.add_parser(
        'add',
        help='add <filename> to .gitattributes and to the index')
    parser_add.add_argument('filename',
                            help='filename to add')

    parser_clear = subparsers.add_parser(
        'clear',
        help='remove pushed files from cache')

    parser_config = subparsers.add_parser(
        'config',
        help='help to configure the git-bigfile filter options')
    parser_config.add_argument('--global', action='store_true',
                               help='install in global .gitconfig, not local')

    parser_filter_clean = subparsers.add_parser(
        'filter-clean',
        help='replace the bigfile received on stdin with its SHA')

    parser_filter_smudge = subparsers.add_parser(
        'filter-smudge',
        help='try to replace the SHA file with the corresponding bigfile')

    parser_push = subparsers.add_parser(
        'push',
        help='push cached files to the server')

    parser_pull = subparsers.add_parser(
        'pull',
        help='expand bigfiles by pulling them from the server if needed')
    parser_pull.add_argument('files', nargs='*', metavar='FILENAME',
                             help='If specified, pull just these files')

    parser_status = subparsers.add_parser(
        'status',
        help='display the status of all bigfiles')

    if _sync_git_bigfile(os.path.dirname(os.path.dirname(__file__))):
        # Restart the process since we may have git-pulled new content.
        os.execv(sys.argv[0], sys.argv)

    args = parser.parse_args()
    arg_dict = vars(args)

    cmd = arg_dict.pop('cmd')
    if cmd == 'config':
        # '--global' conflicts with a python keyword, so we must be careful.
        command.config(global_flag=arg_dict['global'])
    else:
        git_bigfile = command.GitBigfile()
        getattr(git_bigfile, cmd.replace('-', '_'))(**arg_dict)


if __name__ == '__main__':
    main()
