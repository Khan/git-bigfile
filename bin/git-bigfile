#!/usr/bin/env python
"""git-bigfile

Usage: git-bigfile [-h|-v] (add <filename>|clear|config [--global]|
                            filter-clean|filter-smudge|push|pull|status)
"""

import os
import re
import sys
sys.path.append(os.path.join(os.path.dirname('__file__'), '..', 'gitbigfile'))

from gitbigfile import command, __version__


def main():
    """entry point"""
    import argparse

    usage = re.findall(r'Usage: (.*)', __doc__, re.DOTALL)[0].strip()

    parser = argparse.ArgumentParser(usage=usage, version=__version__)
    subparsers = parser.add_subparsers(dest='cmd')
    parser_add = subparsers.add_parser(
        'add',
        help='add <filename> to .gitattributes and to the index')
    parser_add.add_argument('filename',
                            help='filename to add')

    parser_clear = subparsers.add_parser(
        'clear',
        help='remove pushed files from cache')

    parser_config = subparsers.add_parser(
        'config',
        help='help to configure the git-bigfile filter options')
    parser_config.add_argument('--global', action='store_true',
                               help='install in global .gitconfig, not local')

    parser_filter_clean = subparsers.add_parser(
        'filter-clean',
        help='replace the bigfile received on stdin with its SHA')

    parser_filter_smudge = subparsers.add_parser(
        'filter-smudge',
        help='try to replace the SHA file with the corresponding bigfile')

    parser_push = subparsers.add_parser(
        'push',
        help='push cached files to the server')

    parser_pull = subparsers.add_parser(
        'pull',
        help='expand bigfiles by pulling them from the server if needed')

    parser_status = subparsers.add_parser(
        'status',
        help='display the status of all bigfiles')

    args = parser.parse_args()
    arg_dict = vars(args)

    if args.cmd == 'config':
        # '--global' conflicts with a python keyword, so we must be careful.
        command.config(global_flag=arg_dict['global'])
    else:
        git_bigfile = command.GitBigfile()
        getattr(git_bigfile, cmd.replace('-', '_'))(**arg_dict)


if __name__ == '__main__':
    main()
